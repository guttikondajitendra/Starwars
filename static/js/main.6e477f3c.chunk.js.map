{"version":3,"sources":["Actions/Action.js","CharactersComponent.js","App.js","reducers/rootReducer.js","reducers/AppReducer.js","index.js","store.js"],"names":["SET_CHARACTER_DATA","SET_FILMS","SHOW_LOADING","fetchCharacters","dispatch","fetch","method","then","res","json","data","type","payload","results","catch","err","console","log","fetchMovies","characterIndex","getState","a","characters","app","showLoading","character","filmData","Promise","all","films","map","filmUrl","fetchFilm","loading","url","CharacterComponent","props","onChange","value","target","Number","state","this","sortedFilm","sort","b","Date","release_date","lastWorkedMovie","length","allCharacters","name","index","id","film","title","React","Component","connect","ownProps","bindActionCreators","App","simpleAction","event","className","color","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","StrictMode","document","getElementById"],"mappings":"qQAAaA,EAAqB,qBACrBC,EAAY,YACZC,EAAe,eASfC,EAAkB,kBAAM,SAAAC,GAEjC,OAAOC,MADK,wBACM,CACdC,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAM,SAAAG,GACLN,EAAS,CACLO,KAAMX,EACNY,QAASF,EAAKG,aAEnBC,OAAM,SAAAC,GAELC,QAAQC,IAAIF,QAIPG,EAAc,SAACC,GAAD,8CAAoB,WAAOf,EAAUgB,GAAjB,qBAAAC,EAAA,yDACnCC,EAAeF,IAAWG,IAA1BD,WACRlB,EAASoB,GAAY,MAClBL,GAAkB,GAHsB,wBAIjCM,EAAYH,EAAWH,GACvBO,EAAW,GALsB,SAMpBC,QAAQC,IACvBH,EAAUI,MAAMC,KAAI,SAAAC,GAAO,OAAIC,EAAUD,EAASL,OAPf,OAMjChB,EANiC,OASvCM,QAAQC,IAAIP,GACZN,EAAS,CACLO,KAAMV,EACNW,QAASF,IAZ0B,wBAevCN,EAAS,CACLO,KAAMV,EACNW,QAAS,KAjB0B,QAoB3CR,EAASoB,GAAY,IApBsB,4CAApB,yDAuBdA,EAAc,SAACS,GAAD,OAAa,SAAA7B,GACpCA,EAAS,CACLO,KAAMT,EACNU,QAASqB,MAIXD,EAAY,SAACE,EAAKR,GACpB,OAAOrB,MAAM6B,EAAK,CACd5B,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBK,OAAM,SAAAC,GAELC,QAAQC,IAAIF,O,sBC1DdoB,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,SAAW,YAAuB,IAAbC,EAAY,EAApBC,OAAQD,MACjB,EAAKF,MAAMlB,YAAYsB,OAAOF,GAAS,IANvC,EAAKG,MAAQ,GAFC,E,gEAYdC,KAAKN,MAAMjC,oB,+BAIX,IADI,EAE0BuC,KAAKN,MAA3Bd,EAFJ,EAEIA,WAAYO,EAFhB,EAEgBA,MACdc,EAAad,EAAMe,MAAK,SAACvB,EAAGwB,GAAJ,OAAU,IAAIC,KAAKzB,EAAE0B,cAAgB,IAAID,KAAKD,EAAEE,iBACxEC,EAAkBL,GAAcA,EAAWM,QAAUN,EAAWA,EAAWM,OAAS,GACpFC,EAAa,CAJA,CAACC,KAAK,WAIN,mBAAmB7B,IACtC,OACI,qCACI,gCACI,6CAGA,wBAAQe,SAAUK,KAAKL,SAAvB,SAEQa,EAAcpB,KAAI,SAACL,EAAW2B,GAC1B,OACA,wBAAoBd,MAAOc,EAA3B,SAAmC3B,EAAU0B,MAAhCC,WAM7B,sBAAKC,GAAG,QAAR,UACI,wCAEIxB,EAAMC,KAAI,SAAAwB,GAAI,OACV,8BACKA,EAAKC,OADAD,SAMtB,gCACI,uDACA,uBACA,8BACKN,EAAe,UAAMA,EAAgBO,MAAtB,YAA+BP,EAAgBD,cAAiB,iB,GApDvES,IAAMC,WAyExBC,eAbS,SAACjB,EAAOkB,GAC5B,IAAMrC,EAAamB,EAAMlB,IAAID,YAAc,GACrCO,EAAQY,EAAMlB,IAAIM,OAAS,GAEjC,OAAO,aACHP,aACAO,SACG8B,MAIgB,SAAAvD,GAAQ,OAAIwD,YAAmB,CAACzD,kBAAiBe,eAAcd,KAE3EsD,CAA6CvB,G,iBCtEtD0B,G,kNACJC,aAAe,SAACC,GACd,EAAK3B,MAAM0B,gB,uDAGX,IAAMtC,EAAckB,KAAKN,MAAMZ,YACjC,OACE,sBAAKwC,UAAU,MAAf,UAEIxC,GACA,qBAAKwC,UAAY,UAAjB,SACE,cAAC,IAAD,CAAcrD,KAAK,OAAOsD,MAAM,cAGrC,cAAC,EAAD,W,GAdaT,IAAMC,YAiCTC,eAZS,SAAAjB,GACtB,IAAMjB,EAAciB,EAAMlB,IAAIC,YAC9B,OAAO,aACLA,eACGiB,MAIqB,SAAArC,GAAQ,MAAK,CACvC0D,aAAc,kBAAM1D,GFlCY,SAAAA,GAC9BA,EAAS,CACRO,KAAM,gBACNC,QAAS,mCEkCC8C,CAA8CG,G,QCvC9CK,cAAgB,CAC3B3C,ICDW,WAAyB,IAAxBkB,EAAuB,uDAAf,GAAI0B,EAAW,uCACnC,OAAQA,EAAOxD,MACd,KAAKX,EACJ,MAAO,CACNsB,WAAY6C,EAAOvD,SAEpB,KAAKX,EACH,OAAO,2BACFwC,GADL,IAEEZ,MAAOsC,EAAOvD,UAElB,KAAKV,EACH,kCACKuC,GADL,IAEEjB,YAAa2C,EAAOvD,UAEzB,QACC,OAAO6B,MCZb2B,IAASC,OACP,cAAC,IAAD,CAAUC,MCLG,WAA0C,IAAlBC,EAAiB,uDAAJ,GACnD,OAAOC,YACNC,EACAF,EACCG,YAAgBC,MDCAC,GAAjB,SACA,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,W","file":"static/js/main.6e477f3c.chunk.js","sourcesContent":["export const SET_CHARACTER_DATA = \"SET_CHARACTER_DATA\";\r\nexport const SET_FILMS = \"SET_FILMS\";\r\nexport const SHOW_LOADING = \"SHOW_LOADING\";\r\n\r\nexport const simpleAction = () => dispatch => {\r\n    dispatch({\r\n     type: 'SIMPLE_ACTION',\r\n     payload: 'result_of_simple_action'\r\n    })\r\n}\r\n\r\nexport const fetchCharacters = () => dispatch => {\r\n    const url = \"http://swapi.dev/api/\";\r\n    return fetch(url, {\r\n        method: 'GET',\r\n      }).then(res => res.json())\r\n      .then( data => {\r\n        dispatch({\r\n            type: SET_CHARACTER_DATA,\r\n            payload: data.results\r\n        })\r\n    }).catch(err => {\r\n        //Error handling should go here.\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nexport const fetchMovies = (characterIndex) => async (dispatch, getState) => {\r\n    const { characters } = getState().app;\r\n    dispatch(showLoading(true));\r\n    if(characterIndex >= 0){\r\n        const character = characters[characterIndex];\r\n        const filmData = [];\r\n        const data = await Promise.all(\r\n            character.films.map(filmUrl => fetchFilm(filmUrl, filmData))\r\n        );\r\n        console.log(data);\r\n        dispatch({\r\n            type: SET_FILMS,\r\n            payload: data\r\n        });\r\n    }else{\r\n        dispatch({\r\n            type: SET_FILMS,\r\n            payload: []\r\n        });\r\n    }\r\n    dispatch(showLoading(false));\r\n}\r\n\r\nexport const showLoading = (loading) => dispatch => {\r\n    dispatch({\r\n        type: SHOW_LOADING,\r\n        payload: loading\r\n    })\r\n}\r\n\r\nconst fetchFilm = (url, filmData) => {\r\n    return fetch(url, {\r\n        method: 'GET',\r\n      }).then(res => res.json())\r\n      .catch(err => {\r\n        //Error handling should go here.\r\n        console.log(err);\r\n    });\r\n}","import React from 'react';\r\nimport { fetchCharacters, fetchMovies } from './Actions/Action';\r\nimport { connect  } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nclass CharacterComponent extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    onChange = ({target:{value}}) => {\r\n        this.props.fetchMovies(Number(value) - 1);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchCharacters();\r\n    }\r\n\r\n    render(){\r\n        const firtOption = {name:\"Select\"};\r\n        const { characters, films } = this.props;\r\n        const sortedFilm = films.sort((a, b) => new Date(a.release_date) - new Date(b.release_date));\r\n        const lastWorkedMovie = sortedFilm && sortedFilm.length && sortedFilm[sortedFilm.length - 1]\r\n        const allCharacters = [firtOption, ...characters];\r\n        return(\r\n            <>\r\n                <div>\r\n                    <div>\r\n                        Characters\r\n                    </div>\r\n                    <select onChange={this.onChange}>\r\n                        {\r\n                            allCharacters.map((character, index) => {\r\n                                return(\r\n                                <option key={index} value={index}>{character.name}</option>\r\n                                )\r\n                            })\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div id=\"films\">\r\n                    <div>Films</div>\r\n                    {\r\n                        films.map(film => \r\n                            <div key={film}>\r\n                                {film.title}\r\n                            </div>\r\n                            )\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <div>Name/Year Last movie</div>\r\n                    <hr/>\r\n                    <div>\r\n                        {lastWorkedMovie ? `${lastWorkedMovie.title}-${lastWorkedMovie.release_date}` : null}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) =>{\r\n    const characters = state.app.characters || [];\r\n    const films = state.app.films || [];\r\n\r\n    return {\r\n        characters,\r\n        films,\r\n        ...ownProps\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({fetchCharacters, fetchMovies}, dispatch)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterComponent);","import React from 'react';\nimport { simpleAction } from './Actions/Action';\nimport { connect  } from 'react-redux';\nimport CharacterComponent from \"./CharactersComponent\";\nimport ReactLoading from \"react-loading\";\nimport './App.css';\n\n\nclass App extends React.Component {\n  simpleAction = (event) => {\n    this.props.simpleAction();\n  }\n  render () {\n    const showLoading = this.props.showLoading;\n  return (\n    <div className=\"App\">\n      {\n        showLoading &&\n        <div className = \"spinner\">\n          <ReactLoading type=\"spin\" color=\"#000000\" />\n        </div>\n      }\n     <CharacterComponent />\n  \n    </div>\n  );\n}\n}\n\nconst mapStateToProps = state => {\n  const showLoading = state.app.showLoading;\n  return {\n    showLoading,\n    ...state\n  }\n }\n\n const mapDispatchToProps = dispatch => ({\n  simpleAction: () => dispatch(simpleAction())\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n","import { combineReducers } from 'redux';\r\nimport app from './AppReducer';\r\nexport default combineReducers({\r\n    app\r\n});","import { SET_CHARACTER_DATA, SET_FILMS, SHOW_LOADING } from \"../Actions/Action\";\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n     case SET_CHARACTER_DATA:\r\n      return {\r\n       characters: action.payload\r\n      }\r\n      case SET_FILMS:\r\n        return {\r\n          ...state,\r\n          films: action.payload\r\n        }\r\n      case SHOW_LOADING:\r\n        return{\r\n          ...state,\r\n          showLoading: action.payload\r\n        }\r\n     default:\r\n      return state\r\n    }\r\n   }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n  rootReducer,\r\n  initialState,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}